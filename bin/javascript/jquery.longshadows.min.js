(function (b) {
    b(function () {
        b.fn.longshadows = function (a) {
            var e = this.find("span"),
                g = this.find("img"),
                f = document.defaultView.getComputedStyle(this.get(0), null),
                d = f.backgroundColor;
            "transparent" == f.backgroundColor && (d = "rgba(0,0,0,0)");
            var c = b.extend({
                boxWidth: "0px" == f.width ? "100px" : f.width,
                boxHeight: "0px" == f.height ? "100px" : f.height,
                boxColor: d,
                boxShadowColor: ["#cccccc", "#ffffff"],
                boxShadowLength: 100,
                boxShadowAngle: 45,
                boxShadowOpacity: 100,
                textFont: "arial",
                textSize: "75px",
                textColor: "#ffffff",
                textCentered: !0,
                textShadowColor: "auto",
                textShadowLength: "auto",
                textShadowAngle: "auto",
                textShadowOpacity: 100,
                imgWidth: "auto",
                imgHeight: "auto",
                imgCentered: !0,
                imgShadowColor: "auto",
                imgShadowLength: "auto",
                imgShadowAngle: "auto",
                imgShadowOpacity: 100
            }, a);
            this.css({
                width: c.boxWidth,
                height: c.boxHeight,
                "background-color": c.boxColor,
                overflow: "hidden"
            });
            c.textCentered && e.css({
                display: "inline-block",
                width: "100%",
                "line-height": c.boxHeight,
                "text-align": "center"
            });
            g.css({
                width: c.imgWidth,
                height: c.imgHeight
            });
            c.imgCentered ? (g.css({
                display: "block",
                margin: "0 auto"
            }), 0 == g.closest(".longshadows-image-helper").length && g.wrap("<div class='longshadows-image-helper' style='display:table-cell;vertical-align:middle;width:" + c.boxWidth + ";height:" + c.boxHeight + ";'></div>")) : g.css({
                width: "",
                height: ""
            });
            var f = a = "",
                h = null,
                l = null;
            b.isArray(c.boxShadowColor) ? (h = COLOR_UTILS.parseColor(c.boxShadowColor[0]), l = COLOR_UTILS.parseColor(c.boxShadowColor[1])) : h = l = COLOR_UTILS.parseColor(c.boxShadowColor);
            for (d = 1; d <= c.boxShadowLength; d++) {
                var k = Math.round(d * Math.cos(c.boxShadowAngle *
                        Math.PI / 180)),
                    p = Math.round(d * Math.sin(c.boxShadowAngle * Math.PI / 180)),
                    m = (c.boxShadowLength - d) / c.boxShadowOpacity,
                    m = -d * d / (c.boxShadowOpacity * c.boxShadowLength) + c.boxShadowLength / c.boxShadowOpacity,
                    m = 1,
                    n = COLOR_UTILS.transition(h, l, d, c.boxShadowLength);
                a += k + "px " + p + "px 0px rgba(" + n.r + "," + n.g + "," + n.b + "," + m + "),"
            }
            "auto" == c.textShadowAngle && (c.textShadowAngle = c.boxShadowAngle);
            l = h = null;
            "auto" == c.textShadowColor ? (d = COLOR_UTILS.parseColor(c.boxColor), k = COLOR_UTILS.RGBToHSB({
                    r: d[0],
                    g: d[1],
                    b: d[2]
                }), k.b *= 1.5,
                h = COLOR_UTILS.parseColor("#" + COLOR_UTILS.HSBToHex(k)), l = d) : b.isArray(c.textShadowColor) ? (h = COLOR_UTILS.parseColor(c.textShadowColor[0]), l = COLOR_UTILS.parseColor(c.textShadowColor[1])) : h = l = COLOR_UTILS.parseColor(c.textShadowColor);
            "auto" == c.textShadowLength && (c.textShadowLength = c.boxShadowLength);
            for (d = 1; d <= c.textShadowLength; d++) k = Math.round(d * Math.cos(c.textShadowAngle * Math.PI / 180)), p = Math.round(d * Math.sin(c.textShadowAngle * Math.PI / 180)), m = 1, n = COLOR_UTILS.transition(h, l, d, c.textShadowLength), f +=
                k + "px " + p + "px 0px rgba(" + n.r + "," + n.g + "," + n.b + "," + m + "),";
            var q = null,
                r = null;
            "auto" == c.imgShadowColor ? (d = COLOR_UTILS.parseColor(c.boxColor), k = COLOR_UTILS.RGBToHSB({
                r: d[0],
                g: d[1],
                b: d[2]
            }), k.b *= 1.5, q = COLOR_UTILS.parseColor("#" + COLOR_UTILS.HSBToHex(k)), r = d) : b.isArray(c.imgShadowColor) ? (q = COLOR_UTILS.parseColor(c.imgShadowColor[0]), r = COLOR_UTILS.parseColor(c.imgShadowColor[1])) : q = r = COLOR_UTILS.parseColor(c.imgShadowColor);
            "auto" == c.imgShadowLength && (c.imgShadowLength = c.boxShadowLength);
            "auto" == c.imgShadowAngle &&
                (c.imgShadowAngle = c.boxShadowAngle);
            g.each(function (a, d) {
                d.complete && b.drawImageLongShadow(d, c, q, r)
            });
            g.load(function () {
                b.drawImageLongShadow(this, c, q, r)
            });
            for (d = 1; d <= c.imgShadowLength; d++);
            a = a.substring(0, a.length - 1);
            f = f.substring(0, f.length - 1);
            this.css({
                "box-shadow": a,
                "-moz-box-shadow": a,
                "-webkit-box-shadow": a
            });
            e.css({
                "text-shadow": f,
                "-moz-text-shadow": f,
                "-webkit-text-shadow": f
            });
            return this
        }
    });
    b.drawImageLongShadow = function (a, e, g, f) {
        var d = document.createElement("canvas");
        d.width = parseInt(e.boxWidth);
        d.height = parseInt(e.boxHeight);
        var c = document.createElement("canvas");
        c.width = d.width;
        c.height = d.height;
        canvasResultCtx = c.getContext("2d");
        for (var h = d.getContext("2d"), l = e.imgShadowLength; 1 <= l; l--) {
            h.save();
            h.clearRect(0, 0, d.width, d.height);
            var k = COLOR_UTILS.transition(g, f, l, e.imgShadowLength),
                p = Math.round(l * Math.cos(e.imgShadowAngle * Math.PI / 180)),
                m = Math.round(l * Math.sin(e.imgShadowAngle * Math.PI / 180));
            h.translate(p + Math.round(d.width / 2 - b(a).width() / 2), m + Math.round(d.height / 2 - b(a).height() / 2));
            h.drawImage(a,
                0, 0);
            h.globalCompositeOperation = "source-in";
            h.fillStyle = "rgb(" + k.r + "," + k.g + "," + k.b + ")";
            h.rect(0, 0, d.width, d.height);
            h.fill();
            h.restore();
            canvasResultCtx.drawImage(d, 0, 0)
        }
        b(a).parent().parent().css({
            "background-image": "none"
        });
        e = c.toDataURL("image/png");
        h.clearRect(0, 0, c.width, c.height);
        canvasResultCtx.clearRect(0, 0, d.width, d.height);
        b(a).parent().parent().css({
            "background-image": "url(" + e + ")",
            "background-repeat": "no-repeat",
            "vertical-align": "top"
        })
    }
})(jQuery);
var COLOR_UTILS = {
    transition: function (b, a, e, g) {
        return {
            r: Math.round(b[0] + e * (a[0] - b[0]) / g),
            g: Math.round(b[1] + e * (a[1] - b[1]) / g),
            b: Math.round(b[2] + e * (a[2] - b[2]) / g)
        }
    },
    HSBToRGB: function (b) {
        var a, e, g;
        a = Math.round(b.h);
        var f = Math.round(255 * b.s / 100);
        b = Math.round(255 * b.b / 100);
        if (0 == f) a = e = g = b;
        else {
            var f = (255 - f) * b / 255,
                d = (b - f) * (a % 60) / 60;
            360 == a && (a = 0);
            60 > a ? (a = b, g = f, e = f + d) : 120 > a ? (e = b, g = f, a = b - d) : 180 > a ? (e = b, a = f, g = f + d) : 240 > a ? (g = b, a = f, e = b - d) : 300 > a ? (g = b, e = f, a = f + d) : 360 > a ? (a = b, e = f, g = b - d) : g = e = a = 0
        }
        return {
            r: Math.round(a),
            g: Math.round(e),
            b: Math.round(g)
        }
    },
    RGBToHex: function (b) {
        b = [b.r.toString(16), b.g.toString(16), b.b.toString(16)];
        for (var a = 0; a < b.length; a++) 1 == b[a].length && (b[a] = "0" + b[a]);
        return b.join("")
    },
    HSBToHex: function (b) {
        return this.RGBToHex(this.HSBToRGB(b))
    },
    RGBToHSB: function (b) {
        var a = b.r,
            e = b.g;
        b = b.b;
        a /= 255;
        e /= 255;
        b /= 255;
        var g = Math.max(a, e, b),
            f = Math.min(a, e, b),
            d = 0,
            c = (g + f) / 2;
        if (g == f) d = f = 0;
        else {
            var h = g - f,
                f = 0.5 < c ? h / (2 - g - f) : h / (g + f);
            switch (g) {
            case a:
                d = (e - b) / h + (e < b ? 6 : 0);
                break;
            case e:
                d = (b - a) / h + 2;
                break;
            case b:
                d = (a - e) / h + 4
            }
            d /= 6
        }
        return {
            h: Math.floor(360 *
                d),
            s: Math.floor(100 * f),
            b: Math.floor(100 * c)
        }
    },
    parseColor: function (b) {
        var a, e = parseInt;
        b = b.replace(/\s\s*/g, "");
        if (a = /^#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})/.exec(b)) a = [e(a[1], 16), e(a[2], 16), e(a[3], 16)];
        else if (a = /^#([\da-fA-F])([\da-fA-F])([\da-fA-F])/.exec(b)) a = [17 * e(a[1], 16), 17 * e(a[2], 16), 17 * e(a[3], 16)];
        else if (a = /^rgba\(([\d]+),([\d]+),([\d]+),([\d]+|[\d]*.[\d]+)\)/.exec(b)) a = [+a[1], +a[2], +a[3], +a[4]];
        else if (a = /^rgb\(([\d]+),([\d]+),([\d]+)\)/.exec(b)) a = [+a[1], +a[2], +a[3]];
        else throw Error(b +
            " is not supported by $.parseColor");
        isNaN(a[3]) && (a[3] = 1);
        return a.slice(0, 3)
    }
};